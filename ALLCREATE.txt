-- =====================================================
-- REDESIGNED SCHOOL MANAGEMENT SYSTEM DATABASE SCHEMA
-- =====================================================

-- ─────────────  SQL SERVER (CORE SYSTEM)  ───────────── 
-- Purpose: Master data, authentication, core academic entities

-- Core user authentication and roles
CREATE TABLE users (
    id              INT IDENTITY(1,1) PRIMARY KEY,
    username        VARCHAR(50) UNIQUE NOT NULL,
    password_hash   VARCHAR(255) NOT NULL,
    email           VARCHAR(100) UNIQUE NOT NULL,
    role            VARCHAR(20) NOT NULL CHECK (role IN ('student', 'teacher', 'parent', 'admin')),
    active          BIT DEFAULT 1,
    created_at      DATETIME2 DEFAULT GETDATE(),
    last_login      DATETIME2
);

-- Academic subjects
CREATE TABLE subjects (
    id              INT IDENTITY(1,1) PRIMARY KEY,
    code            VARCHAR(10) UNIQUE NOT NULL,
    name            VARCHAR(100) NOT NULL,
    description     TEXT,
    active          BIT DEFAULT 1
);

-- Physical classrooms and facilities
CREATE TABLE classrooms (
    id              INT IDENTITY(1,1) PRIMARY KEY,
    building        VARCHAR(50) NOT NULL,
    room_number     VARCHAR(20) NOT NULL,
    capacity        INT NOT NULL,
    equipment       TEXT,
    active          BIT DEFAULT 1,
    UNIQUE(building, room_number)
);

-- Scheduled lessons (simplified from original)
CREATE TABLE lessons (
    id              INT IDENTITY(1,1) PRIMARY KEY,
    subject_id      INT NOT NULL REFERENCES subjects(id),
    teacher_user_id INT NOT NULL REFERENCES users(id),
    classroom_id    INT NOT NULL REFERENCES classrooms(id),
    lesson_datetime DATETIME2 NOT NULL,
    duration_minutes INT DEFAULT 45,
    status          VARCHAR(20) DEFAULT 'scheduled' CHECK (status IN ('scheduled', 'completed', 'cancelled')),
    notes           TEXT
);

-- ─────────────  ORACLE (PEOPLE MANAGEMENT)  ─────────── 
-- Purpose: People, relationships, academic records

-- Teacher profiles linked to users
CREATE TABLE teachers (
    id              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id         NUMBER NOT NULL UNIQUE,  -- CROSS-DB: references users.id
    first_name      VARCHAR2(50) NOT NULL,
    last_name       VARCHAR2(50) NOT NULL,
    hire_date       DATE NOT NULL,
    department      VARCHAR2(100),
    phone           VARCHAR2(20),
    emergency_contact VARCHAR2(200),
    active          NUMBER(1) DEFAULT 1
);

-- Student profiles linked to users  
CREATE TABLE students (
    id              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id         NUMBER NOT NULL UNIQUE,  -- CROSS-DB: references users.id
    student_number  VARCHAR2(20) UNIQUE NOT NULL,
    first_name      VARCHAR2(50) NOT NULL,
    last_name       VARCHAR2(50) NOT NULL,
    birth_date      DATE NOT NULL,
    enrollment_date DATE NOT NULL,
    grade_level     NUMBER(2) NOT NULL,
    address         VARCHAR2(500),
    phone           VARCHAR2(20),
    emergency_contact VARCHAR2(200),
    active          NUMBER(1) DEFAULT 1
);

-- Parent profiles linked to users
CREATE TABLE parents (
    id              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id         NUMBER NOT NULL UNIQUE,  -- CROSS-DB: references users.id
    first_name      VARCHAR2(50) NOT NULL,
    last_name       VARCHAR2(50) NOT NULL,
    phone           VARCHAR2(20) NOT NULL,
    email           VARCHAR2(100),
    address         VARCHAR2(500),
    occupation      VARCHAR2(100),
    active          NUMBER(1) DEFAULT 1
);

-- Simplified parent-student relationships (ONLY remaining junction table)
CREATE TABLE student_parent_relationships (
    student_id      NUMBER NOT NULL REFERENCES students(id),
    parent_id       NUMBER NOT NULL REFERENCES parents(id),
    relationship    VARCHAR2(20) NOT NULL CHECK (relationship IN ('father', 'mother', 'guardian', 'step-parent', 'grandparent')),
    primary_contact NUMBER(1) DEFAULT 0,
    created_at      DATE DEFAULT SYSDATE,
    PRIMARY KEY (student_id, parent_id)
);

-- Academic grades
CREATE TABLE grades (
    id              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_id      NUMBER NOT NULL REFERENCES students(id),
    lesson_id       NUMBER NOT NULL,  -- CROSS-DB: references lessons.id
    teacher_id      NUMBER NOT NULL REFERENCES teachers(id),
    grade_value     VARCHAR2(5) NOT NULL,
    grade_points    NUMBER(3,2),
    grade_date      DATE NOT NULL,
    grade_type      VARCHAR2(20) DEFAULT 'regular' CHECK (grade_type IN ('quiz', 'test', 'assignment', 'project', 'final')),
    notes           VARCHAR2(500),
    created_at      DATE DEFAULT SYSDATE
);

-- ─────────────  POSTGRESQL (EVENTS & LOGS)  ─────────── 
-- Purpose: Time-based events, logging, high-write operations

-- Student attendance tracking
CREATE TABLE attendance (
    id              SERIAL PRIMARY KEY,
    lesson_id       INTEGER NOT NULL,  -- CROSS-DB: references lessons.id
    student_id      INTEGER NOT NULL,  -- CROSS-DB: references students.id
    status          VARCHAR(20) NOT NULL CHECK (status IN ('present', 'absent', 'late', 'excused')),
    check_in_time   TIMESTAMP,
    notes           TEXT,
    recorded_by     INTEGER,  -- CROSS-DB: references users.id
    recorded_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- System notifications
CREATE TABLE notifications (
    id              SERIAL PRIMARY KEY,
    user_id         INTEGER NOT NULL,  -- CROSS-DB: references users.id
    title           VARCHAR(200) NOT NULL,
    message         TEXT NOT NULL,
    type            VARCHAR(50) DEFAULT 'info' CHECK (type IN ('info', 'warning', 'success', 'error')),
    priority        VARCHAR(20) DEFAULT 'normal' CHECK (priority IN ('low', 'normal', 'high', 'urgent')),
    sent_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    read_at         TIMESTAMP,
    read_status     BOOLEAN DEFAULT FALSE,
    expires_at      TIMESTAMP
);

-- Comprehensive audit logging
CREATE TABLE audit_logs (
    id              SERIAL PRIMARY KEY,
    user_id         INTEGER,  -- CROSS-DB: references users.id (nullable for system events)
    action          VARCHAR(50) NOT NULL,
    table_name      VARCHAR(100) NOT NULL,
    record_id       VARCHAR(50) NOT NULL,
    old_values      JSONB,
    new_values      JSONB,
    ip_address      INET,
    user_agent      TEXT,
    timestamp       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    session_id      VARCHAR(255)
);

-- Database change tracking
CREATE TABLE schema_migrations (
    id              SERIAL PRIMARY KEY,
    version         VARCHAR(50) NOT NULL UNIQUE,
    description     TEXT,
    applied_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    applied_by      VARCHAR(100)
);